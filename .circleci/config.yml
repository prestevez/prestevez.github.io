## CricleCI for prestevez.com
version: 2.1
jobs:
  build:
    docker:
      - image: cibuilds/hugo:0.76
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PWD
    working_directory: /src
    environment:
      HUGO_BUILD_DIR: /src/public
    steps:

        # install git
      #- run: apk update && apk add git openssh

      # checkout repository
      - checkout

      # build with hugo
      - run:
          name: "Run Hugo"
          command: HUGO_ENV=production hugo -v -d $HUGO_BUILD_DIR
      - run:
          name: "Test website"
          command: htmlproofer src/public --allow-hash-href --check-html --empty-alt-ignore --disable-external

#  deploy:
#    environment:
#      # if you use bookdown or blogdown, replace "PKGDOWN" by the respective
#      # capitalized term. This also might need to be done in tic.R
#      BUILD_BLOGDOWN: true
#
#    docker:
#      - image: prestevez/r-pres-blog
#        auth:
#          username: $DOCKERHUB_USER
#          password: $DOCKERHUB_PWD
#    steps:
#      - checkout
#
#      - run: echo "$(date '+%d-%m')-r-release" > /tmp/_tmp_file
#      - restore_cache:
#          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}
#
#      - run:
#          name: Deploy
#          command: |
#            sudo apt update && sudo apt install -y ccache
#            echo -e 'options(Ncpus = 4, repos = structure(c(CRAN = "https://cloud.r-project.org/")))' > $HOME/.Rprofile
#            mkdir -p ~/.R && echo -e 'CC=ccache gcc\nCPP=ccache gcc\nCXX=ccache g++\nCXX11=ccache g++\nCXX14=ccache g++\nCXX17=ccache g++\nF77=ccache gfortran\nFC=ccache gfortran' > $HOME/.R/Makevars
#            mkdir -p $HOME/.ccache && echo -e 'max_size = 5.0G\nsloppiness = include_file_ctime\nhash_dir=false' > $HOME/.ccache/ccache.conf
#            R -q -e 'install.packages("remotes")'
#            R -q -e 'if (getRversion() < "3.2" && !requireNamespace("curl")) install.packages("curl")'
#            R -q -e 'remotes::install_github("ropensci/tic", upgrade = "always"); print(tic::dsl_load()); tic::prepare_all_stages()'
#            R -q -e 'tic::before_deploy()'
#            R -q -e 'tic::deploy()'
#            R -q -e 'tic::after_deploy()'

workflows:
  build-and-deploy:
    jobs:
      - build:
          context:
              - authentication
#      - deploy:
#          requires:
#            - r-release

#  # CRON job daily at 4 am in the morning
#  # - runs the "build" job on the master branch and builds package cache
#  nightly:
#    triggers:
#      - schedule:
#          cron: "0 4 * * *"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - r-release
# Custom user code -------------------------------------------------------------
